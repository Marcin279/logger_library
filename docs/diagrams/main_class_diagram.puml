@startuml

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
  FATAL
  TRACE
  UNKNOWN = 99
}

enum DestinationType {
  FILE
  NETWORK
}

enum LogDestinationOption {
  FILE
  NETWORK
  BOTH
}

class Logger {
  - std::string logFile
  - std::string serverUrl
  - LogDestinationOption destinationOption
  - LogFormatter formatter
  - LogDestinationManager destinationManager

  + Logger(const std::string&, const std::string&, LogDestinationOption)
  + void log(LogLevel, const std::string&)
  + void setLogTimeFormat(const std::string&)
  + ~Logger()
}

class LogFormatter {
  - static std::string timeFormat

  + static std::string format(LogLevel, const std::string&)
  + static void setTimeFormat(const std::string&)
}

class LogDestinationManager {
  - std::vector<std::shared_ptr<LogDestination>> destinations
  - std::vector<DestinationType> destinationTypes

  + void addDestination(std::shared_ptr<LogDestination>, DestinationType)
  + void removeDestination(DestinationType)
  + void logToAllDestinations(LogLevel, const std::string&)
  + void logToFileOnly(LogLevel, const std::string&)
  + void logToNetworkOnly(LogLevel, const std::string&)
}

interface LogDestination {
  + void log(LogLevel, const std::string&)
}

class FileLogger {
  - std::string filename
  - int maxSize

  + FileLogger(const std::string&)
  + void log(LogLevel, const std::string&)
  + void rotateFiles()
}

class NetworkLogger {
  - std::string serverUrl
  - std::shared_ptr<RESTAPIClient> apiClient

  + NetworkLogger(const std::string&)
  + void log(LogLevel, const std::string&)
}

class RESTAPIClient {
  - std::string serverUrl
  - CURL* curlHandle

  + RESTAPIClient(const std::string&)
  + bool sendLog(const std::string&)
}

Logger --> LogFormatter
Logger --> LogDestinationManager
LogDestinationManager --> LogDestination
LogDestination <|-- FileLogger
LogDestination <|-- NetworkLogger
NetworkLogger --> RESTAPIClient
@enduml
